HandsOn
=======

Day-2
~~~~~

1. Write programs for the following:

   [a] Check if a given number is Prime or not

2. Count the number of vowels and consonants in a given string
   NOTE: consonants are letters other than vowels only

   Also find:
   [a] Percentage of vowels against the total number of letters.
   [b] Percentage of consonants against the total number of letters.

3. Generate all Prime numbers upto a given limit

4. Generate all Armstrong numbers between 1 to 500
   Armstrong numbers are those numbers where the sum of the
   cube of the digits is equal to the given number.

5. Find the reciprocals between -5 to +5

6. The Gregorian calendar, which now serves as the standard 
   calendar for civil use throughout the world, has both common
   years and leap years. The leap year is omitted three times 
   every four hundred years.

   In other words, a century year cannot be a leap year unless
   it is divisible by 400.  Thus 1700, 1800, and 1900 were not
   leap years, but 1600, 2000, and 2400 are leap years.

   Your task is to write a Python program which accept a year
   from the user and find whether it is a leap year or not.

   HINT : A leap year is divisible by 4 and not by 100, or is
          divisible by 400

7. In mathematics, the factorial of a non-negative integer n, 
   denoted by n!, is the product of all positive integers less
   than or equal to n. 

   You need to write a program to find the factorial of any
   positive integer. Program should handle negative integers 
   with appropriate message. 

   Later extend the program to find the Binomial Co-efficient.
   
8. Yet another task by our SME in Python Programming. 
   Implementation of the Number Guessing Game.

   Make sure that the following criteria’s are taken care:
   • The guess number is generated by the program randomly. 
     However, you have the option of setting the range.
   • If the guessed number and the given number are same the
     user wins. The program displays “You’ve WON the game…”
   • If the number given by the user is greater or lesser 
     appropriate message is displayed. Like “Number is too big…”
     or “Number is too low…”
   • A maximum of FIVE chances are given. Even after FIVE 
     chances the number is not guessed rightly the following
     message is displayed “You’ve have LOST the game…”

   NOTE : Import the random module (import random) and use the
          randint method to generate a random number

9. Find the BMI (Body Mass Index) given the weight (in kgs) and
   height (in meters).

   BMI = weight / height(m^2)

   If the BMI is value is in the range of 18.5 to 24.9, the 
   person is healthy, however if BMI >= 25 "Over weight" and
   if BMI < 18.5 the person is "Under weight"


10. Find the frequency of the face value of the DICE when the
    DICE is rolled for 'n' times.


===================================================================
Day-2
=====

11. A stack is a last in, first out (LIFO) abstract data type
   and linear data structure. 

   A stack is characterized by two fundamental operations, 
   called push and pop (or pull). 

   The push operation adds a new item to the top of the stack. 
   The pop operation removes an item from the top of the stack. 

   Your task is to write a menu driven program with the following
   option to implement stack.

		     S T A C K   M E N U

			[a] Push.
			[b] Pop.
			[c] Display
			[d] Quit

   NOTE: Care should be taken for UNDERFLOW condition.

12. A queue a First-In-First-Out (FIFO) data structure. 

   Your task is to write a menu driven program with the following
   options to implement queue.


		     Q U E U E      M E N U

			[a] Insert Into the Q.
			[b] Delete From the Q.
			[c] Display Q
			[d] Quit

13. Accept a Valid Single-Digit POSTFIX expression from the user
    and compute it.  
   
    Use list as the data structure for stacking purpose.

14. Build a "Computer Assisted Instruction" application
    which will help an elementary school student learn
    multiplication.

    Use 'random' module to produce two positive one-digit
    integers. The app should then prompt the user with a
    question as follows:

	How much is 5 times 8 ?

    The student then input the answer.

    Possible responses to correct answer:
        Very Good!
	Excellent!
	Nice Work!
	Keep up the good work!

    Possible responses to incorrect answer:
        No. Please try again.
	Wrong. Try once more.
	Don't give up!
	No. Keep trying

    The correct and incorrect responses are stored in a
    list and should be randomly choosen.

    The CAI should continue generating question until
    a correct answer is not give.

15. Build a Phrase-O-Matic appliction which will be a slick talker
    just like the boss or those guys in the marketing.

    You can use the following list of words in you Phrase-O-Matic 
    app.

    firstList = ['24/7', 'multi-tire', '30,000 foot', 'B-to-B', 
                'win-win',
                'front-end', 'web-based', 'pervasive', 'smart', 
		'six-sigma', 'critical-path', 'dynamic' ]

    secondList = ['empowered', 'sticky', 'value-added', 'oriented',
                 'centric', 'distributed', 'clustered', 'branded',
		 'outside-the-box', 'positioned', 'networked', 
		 'focused', 'leveraged', 'aligned', 'targetted',
		 'shared', 'cooperative', 'accelerated']

    thirdList = ['process', 'tipping-point', 'solution', 'space',
                'architecture', core-compentency', 'strategy', 
		'mindshare', 'portal', 'vision', 'paradigm',
		'mission']


16. 
Build a CRUD application for the RTO which maps State Code with
State Names.  It should be a menu-driven program with the following
options.

			CRUD Operations
			===============
			1. Create

			2. Read
	
			3. Update

			4. Delete

			5. Quit


Business Norms:
* No two states can have the same state code
* Updation and deletion is done on confirmation
* If state code is not found appropirate message should
  displayed

17.
Simulate the 'set' command of the Operating System.

Traverse the 'environ' dictionary and display the key-value pairs.
Parse the contents of 'PATH' enviornment variable to display the
list of directories that will be searched for executable files.

NOTE: The 'os' module has the 'environ' dictionary

18.
A dictonary hold the employee details.  The employee IDs are the 
keys and the other details like name, age, gender and basic salary
as values in the form of a list.

Write a program to compute Net Pay for an employee based on the 
following condition.

	HRA is 40% of the Basic Salary
	DA  is 25% of the Basic Salary for Female gender and
	       20% for the Male gender
	PF  is 8% of the Basic Salary
	Net Pay = Basic + HRA + DA - PF


19.
Write user-defined function for the following

	[a] Check if the year passed as an argument is a leap year 
	    or not.  
	[b] Check if the integer passed as an argument is Prime 
	    or not.
	[c] Check if the integer passed as an argument is an
     	    Armstrong number or not.
      
	Return a Boolean value.

        [d] Function to determine the roots of a quadratic equation.

	[e] Function which returns a tuple of the indices of 
	    the two smallest values in list.

	[f] Function to check the given character is:

		* A upper case letter,
		* A lower case letter,
		* A digit or
		* A special symbol

20.
Write a function with default argument

	[a] Compute simple interest. 
            The default rate of interest is 10% otherwise the user 
            specifies it.

	[b] Function with default arguments to print the specified
	    character, the specified number of times.

	The default character is “ * “ and the default number is 40

	printChar()
	printChar('=')
	printChar('#', 30)


21.	
Write a function which takes two argument, the first being 
the temperature and the second being the character to 
indicate whether the temperature is in Fahrenheit ( F ) 
or Celsius ( C ).


	If the temperature is in Fahrenheit, the function should 
	calculate and return the Celsius equivalent and vice-versa.

	*Celsius = ( 5.0 / 9.0 ) * ( Fahrenheit – 32.0 )
	*Fahrenheit = (( 9.0 / 5.0 ) * Celsius ) + 32.0

 Use the keyword argument mechanism to implement the function.

22.	
Write a function which takes three argument, the first being 
the title, the second being the name and the third being the 
message.

	Message(title, name, msg)

   Use the keyword argument mechanism and display the information
   with the following print function:    

	print( “%s %s \n %s”  % (title, name, msg))

23.	
Write a recursive function for the following:

	[a] Factorial of a number.
	[b] GCD of two positive integers.
	[c] The Nth Fibonacci number.

	Later using the above functions solve the following:


	* Find the Binomial co-efficient   nCr = n! / (n – r )! * r!
	* Find LCM (Least Common Multiple) 
		LCM = ( m * n ) / GCD(m, n)
	* Generate the Fibonacci series for the first 'n' numbers

	[d] Recursive function to solve the problem of 
	Tower of Hanoi.

NOTE: It is MANDATORY to provide document strings for all the above user-defined functions with text indicating their usage.



=====================================================================
Day-3
=====
24.	
Modify the Tower of Hanoi recursive function such that function also
gives a count of the number of disk moves.  

	The count is held in a global variable.

25.	
Demonstrate the use of anonymous function using lambda.

	[a] To find the area of a right angle triangle
	[b] To find the volume of a box.
	[c] To convert inches to centimeters.

26.
Create a Module by name 'validate' which will have the following
functions for data validataion:

  [a] isEven(n)		Return True if 'n' is even, False otherwise
  [b] isPrime(n)
  [c] isDate('DD-MON-YYYY')
			Return True if it is a valid date, False
			otherwise
  [d] isIPAddress(ip)	Returns True if the argument passed is a
			valid IP4 address, False otherwise
  
  Import the module and check if the user-defined functions within
  the module are functional or not.

27.
Create a Module by name 'CString' which will implement the following
functions:

  [a] left(s, n)	Return the left-most 'n' chars of the string
  [b] right(s, n)
  [c] str_rev(s)	Reverses a given string
  [d] count_vowels(s)
  [e] count_consonants(s)


  Using this module, check the functionality of the user-defined
  functions.

28.
Write a program to store ITEM details in a csv file.
The item details are as follows:
	Item Code, Description, Price, QOH, Item Type, Reorder Status

	QOH -> Quantity on Hand
	Item Type -> is either F/S/N  
		     F=>Fast Moving, S=>Slow Moving, N=>Non-moving
	Reorder Status => Y or N

	Business Norms
	1) Item Code and Description cannot be empty.
	2) Price and QOH cannot be negiative
	3) Item Type should hold only F or S or N
	
29.
Build a small app for the STORES MANAGER for the following options

			Stores Manager
			==============
			1. Stock Value

			2. Item Status

			3. Reorder Report

			4. Check QOH

			5. Quit
30.
Simulate the following UNIX command with programs

   a) The 'head' command
	This utility display the first n (default=10) lines of
	the file.

   b) The 'wc' command
	This utility gives a count of the number of characters,
	words and lines

31. 
Build a utility by name 'wf' which is an abbrevation for 'Word Frequency' 


   This utility should take the name of a text file and find the
   frequency of words in it.

32. Design an append utiltiy as follows:

	$ append.py
	  Usage: append.py  <source>  <target>

	$ append.py  file1.txt  file2.txt

	 The contents of 'file1.txt' should be appended to 	
	'file2.txt'

======================================================================
Day-4
=====
33.
Enhance Q27 to Q30 with appropriate Exception Handling features.

34.
Ensure that the 'factorial' function (Refer. Q21), 'GCD' function
and the Fibonacci series function handles only POSITIVE NUMBERS.

  Use the 'assert' statement to validate the data.
  Use the exception handling technqiue to handle "AssertionError"


35.
Create a module by name 'Point' which will enable us define a 
class by name 'Point' having 'x' and 'y' as co-ordinates of
a point.

  * It should have the initializer for initializing the object
    The default x and y values are 0
  * Getters and setters
  * String representation of the point instance.
  * Other methods as appropriate

Write a driver program to check the implementation of the 'Point'
class.

It should help the user to find the SLOPE of a LINE.

Refer internet to get the formula to compute the slope of a line

36.
Create a module by name 'ThreeDPoint' which inherite the attributes
and methods from the 'Point' class.

  It should help the user the in store the z-coordinate.

  * It should have the initializer for initializing the object
    The default x and y values are 0
  * Getters and setters
  * String representation of the point instance.
  * Other methods as appropriate

Write a program to find the distance between TWO 3D-points.
Refer to the internet for the formula.

37.
The YES Bank would like to use OOPs features of Python for its
operations.

The CLI for a menu-driven application with the YES bank is as
follows:


			Bank Operations
			===============

			1. Open an Account

			2. Enquiry

			3. Deposit

			4. Withdraw

			5. Int. Amount

			6. Close A/c
			
			7. No.of A/c Holders

			8. Quit


You are suppose to create a module which will help in 
representing a bank account with attributes - account_number, 
name and balance.

  * The default balance is ZERO
  * Have getters and setters
  * Have methods like 'deposit()' and 'withdraw()' which
    will help in performing transactions.
    NOTE: Care should be taken for 'Insufficient funds...'
  * A method to calculate the interest an account hold
    gets @ 11.25% p.a.

You need to have a class variable which hold the count of
accounts operational.


 